{"version":3,"sources":["firebase/firebase-config.js","helpers/fileUpload.js","helpers/loadNotes.js","types/types.js","actions/notes.js","hooks/useForm.js","components/notes/NotesAppBar.js","components/notes/NotesScreen.js","components/journal/NothingSelected.js","actions/ui.js","actions/auth.js","components/journal/JournalEntry.js","components/journal/JournalEntries.js","components/journal/Sidebar.js","components/journal/JournalScreen.js","components/auth/LoginScreen.js","components/auth/RegisterScreen.js","routers/AuthRouter.js","routers/PublicRoutes.js","routers/PrivateRoutes.js","routers/AppRouter.js","reducers/authReducer.js","reducers/notesReducer.js","reducers/uiReducer.js","store/store.js","JournalApp.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","googleAuthProvider","auth","GoogleAuthProvider","fileUpload","file","a","formData","FormData","append","fetch","method","body","resp","ok","json","cloudResp","secure_url","loadNotes","uid","collection","get","notesSnap","notes","forEach","snapChildren","push","id","data","types","startLoadingNotes","dispatch","setNotes","Swal","fire","message","activeNote","note","type","payload","addNewNote","startSaveNote","getState","url","noteToFirestore","doc","update","refreshNote","title","deleteNote","useForm","initialState","useState","values","setValues","handleInputChange","target","name","value","reset","newFormState","NotesAppBar","date","noteDate","moment","useDispatch","active","useSelector","state","className","format","style","display","onChange","e","files","text","allowOutsideClick","onBeforeOpen","showLoading","fileUrl","close","startUploading","onClick","document","querySelector","click","NotesScreen","formValues","activeId","useRef","useEffect","current","autoFocus","placeholder","src","alt","delete","startDeleting","NothingSelected","setError","err","finishLoading","startLoginEmailPassword","email","password","signInWithEmailAndPassword","then","user","login","displayName","catch","logout","JournalEntry","backgroundSize","backgroundImage","JournalEntries","map","key","Sidebar","signOut","newNote","Date","getTime","add","docRef","JournalScreen","LoginScreen","loading","ui","password2","onSubmit","preventDefault","autoComplete","disabled","signInWithPopup","to","RegistrerScreen","msgError","confirmPass","isFormValid","trim","length","validator","isEmail","createUserWithEmailAndPassword","updateProfile","startRegisterWithEmailPasswordName","AuthRouter","path","component","PublicRoute","isAuthenticated","Component","rest","props","PrivateRoute","AppRouter","checking","setChecking","isLogged","setIsLogged","onAuthStateChanged","marginLeft","marginRight","exact","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","reducers","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","JournalApp","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e5146cef.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n// Data from firebase\r\nconst firebaseConfig = {\r\n\tapiKey: \"AIzaSyCpL_N2V7WUgwLcb7iSTBCzMUmSKYpsBLc\",\r\n  authDomain: \"react-app-81060.firebaseapp.com\",\r\n  projectId: \"react-app-81060\",\r\n  storageBucket: \"react-app-81060.appspot.com\",\r\n  messagingSenderId: \"929635286635\",\r\n  appId: \"1:929635286635:web:88d71337bc90aa237f3b2e\"\r\n};\r\n\r\nconst firebaseConfigTesting = {\r\n\tapiKey: 'AIzaSyAE6WrsX6hyLlfuanSzCyCsOQO9sbZiQX4',\r\n\tauthDomain: 'test-env-68902.firebaseapp.com',\r\n\tdatabaseURL: 'https://test-env-68902-default-rtdb.firebaseio.com',\r\n\tprojectId: 'test-env-68902',\r\n\tstorageBucket: 'test-env-68902.appspot.com',\r\n\tmessagingSenderId: '855718962730',\r\n\tappId: '1:855718962730:web:ec58d28605b5668a65c553',\r\n};\r\n\r\n// Setting env access to db\r\nif (process.env.NODE_ENV === 'test') {\r\n\t// testing\r\n  firebase.initializeApp(firebaseConfigTesting);\r\n} else {\r\n  // dev / prod\r\n  // Initialize the App with our configuration data\r\n  firebase.initializeApp(firebaseConfig);\r\n}\r\n\r\n\r\n// Link our app with database\r\nconst db = firebase.firestore();\r\n// Provider to Google auth login\r\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { db, googleAuthProvider, firebase };\r\n","export const fileUpload = async (file) => {\r\n\t// Backend storage server url\r\n\tconst cloudUrl = 'https://api.cloudinary.com/v1_1/jespadas/upload';\r\n\r\n\t// Creates the form data to use POST method\r\n\tconst formData = new FormData();\r\n\r\n\t// Form Data body\r\n\tformData.append('upload_preset', 'react-journal');\r\n\tformData.append('file', file);\r\n\r\n\t// Try to POST the Form Data\r\n\ttry {\r\n\t\t// methot POST with fetch\r\n\t\tconst resp = await fetch(cloudUrl, {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: formData,\r\n\t\t});\r\n\r\n\t\t// If everything is ok we can return the image url from Cloudinary\r\n\t\tif (resp.ok) {\r\n\t\t\tconst cloudResp = await resp.json();\r\n\t\t\treturn cloudResp.secure_url;\r\n\t\t} else {\r\n\t\t\treturn null; // <== changed for the test\r\n\t\t}\r\n\t\t// Catch the Error and show the message\r\n\t} catch (err) {\r\n\t\tthrow err;\r\n\t}\r\n};\r\n","import { db } from '../firebase/firebase-config';\r\n\r\nexport const loadNotes = async (uid) => {\r\n\t// Get the notes from the passed user id\r\n\tconst notesSnap = await db.collection(`${uid}/journal/notes`).get();\r\n\t// Initialize an empty array\r\n\tconst notes = [];\r\n\t// It push each element in notesSnap to notes Array\r\n\tnotesSnap.forEach((snapChildren) => {\r\n\t\tnotes.push({\r\n\t\t\tid: snapChildren.id,\r\n\t\t\t...snapChildren.data(),\r\n\t\t});\r\n\t});\r\n\t// Returns the Array with new values\r\n\treturn notes;\r\n};\r\n","export const types = {\r\n  // Auth actions\r\n  login: \"[Auth] Login\",\r\n  logout: \"[Auth] Logout\",\r\n  // Ui actions\r\n  uiSetError: '[UI] set Error',\r\n  uiRemoveError: '[UI] remove Error',\r\n  // Ui actions\r\n  uiStartLoading: '[UI] Start loading',\r\n  uiFinishLoading: '[UI] Finish loading',\r\n  // Notes actions\r\n  notesAddNew: '[Notes] New note',\r\n  notesActive: '[Notes] Set active note',\r\n  notesLoad: '[Notes] Load notes',\r\n  notesUpdated: '[Notes] Update note saved',\r\n  notesFileUrl: '[Notes] Updated image url',\r\n  notesDelete: '[Notes] Delete note',\r\n  notesLogoutCleaning: '[Notes] Logout cleaning'\r\n\r\n};","import Swal from 'sweetalert2';\r\n\r\nimport { db } from '../firebase/firebase-config';\r\nimport { fileUpload } from '../helpers/fileUpload';\r\nimport { loadNotes } from '../helpers/loadNotes';\r\nimport { types } from '../types/types';\r\n\r\n// Action to post a new note\r\nexport const startNewNote = () => {\r\n\treturn async (dispatch, getState) => {\r\n\t\t// Get the user id credential\r\n\t\tconst { uid } = getState().auth;\r\n\t\t// Set empty values in a new note\r\n\t\tconst newNote = {\r\n\t\t\ttitle: '',\r\n\t\t\tbody: '',\r\n\t\t\tdate: new Date().getTime(),\r\n\t\t};\r\n\t\t// Post the new note in data base\r\n\t\ttry {\r\n\t\t\tconst docRef = await db.collection(`${uid}/journal/notes`).add(newNote);\r\n\t\t\t// Dispatch the active note in order to set active value\r\n\t\t\tdispatch(activeNote(docRef.id, newNote));\r\n\t\t\t// Dispatch\r\n\t\t\tdispatch(addNewNote(docRef.id, newNote));\r\n\t\t} catch (error) {\r\n\t\t\tSwal.fire('Error', error.message, 'error');\r\n\t\t}\r\n\t};\r\n};\r\n\r\n// Load the notes and dispatch the data thru the action\r\nexport const startLoadingNotes = (uid) => {\r\n\treturn async (dispatch) => {\r\n\t\ttry {\r\n\t\t\tconst notes = await loadNotes(uid);\r\n\t\t\tdispatch(setNotes(notes));\r\n\t\t} catch (error) {\r\n\t\t\tSwal.fire('Error', error.message, 'error');\r\n\t\t}\r\n\t};\r\n};\r\n\r\n// Return the active note\r\nexport const activeNote = (id, note) => ({\r\n\ttype: types.notesActive,\r\n\tpayload: {\r\n\t\tid,\r\n\t\t...note,\r\n\t},\r\n});\r\n\r\n// Set the state values from the new note\r\nexport const addNewNote = (id, note) => ({\r\n\ttype: types.notesAddNew,\r\n\tpayload: {\r\n\t\tid,\r\n\t\t...note,\r\n\t},\r\n});\r\n\r\n// Set the selected note\r\nexport const setNotes = (notes) => ({\r\n\ttype: types.notesLoad,\r\n\tpayload: notes,\r\n});\r\n\r\n// Start the async action to save the note in data base\r\nexport const startSaveNote = (note) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\t// Get user id credential\r\n\t\tconst { uid } = getState().auth;\r\n\t\t// If there is not note url it delete it\r\n\t\tif (!note.url) {\r\n\t\t\tdelete note.url;\r\n\t\t}\r\n\t\t// Save the values in the variable\r\n\t\tconst noteToFirestore = { ...note };\r\n\t\t// Deletes the current id\r\n\t\tdelete noteToFirestore.id;\r\n\t\t// Updates the note with its id\r\n\t\ttry {\r\n\t\t\tawait db.doc(`${uid}/journal/notes/${note.id}`).update(noteToFirestore);\r\n\t\t\t// Dispatch new values\r\n\t\t\tdispatch(refreshNote(note.id, noteToFirestore));\r\n\t\t\t// Message\r\n\t\t\tSwal.fire('Saved', note.title, 'success');\r\n\t\t} catch (error) {\r\n\t\t\tSwal.fire('Error', error.message, 'error');\r\n\t\t}\r\n\t};\r\n};\r\n\r\n// Refresh only the note selected by passing the id\r\nexport const refreshNote = (id, note) => ({\r\n\ttype: types.notesUpdated,\r\n\tpayload: {\r\n\t\tid,\r\n\t\t// Passing all the note properties\r\n\t\tnote: {\r\n\t\t\tid,\r\n\t\t\t...note,\r\n\t\t},\r\n\t},\r\n});\r\n\r\n// Upload the selected file\r\nexport const startUploading = (file) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\t// Get the active note data\r\n\t\tconst { active: activeNote } = getState().notes;\r\n\t\t// Message\r\n\t\tSwal.fire({\r\n\t\t\ttitle: 'Uploading',\r\n\t\t\ttext: 'Please wait...',\r\n\t\t\tallowOutsideClick: false,\r\n\t\t\tonBeforeOpen: () => {\r\n\t\t\t\tSwal.showLoading();\r\n\t\t\t},\r\n\t\t});\r\n\t\ttry {\r\n\t\t\t// Save the uploaded file in variable\r\n\t\t\tconst fileUrl = await fileUpload(file);\r\n\t\t\t// Updates de active note url value with the new one\r\n\t\t\tactiveNote.url = fileUrl;\r\n\t\t\t// Dispatch the new value\r\n\t\t\tdispatch(startSaveNote(activeNote));\r\n\t\t\t// End of message\r\n\t\t\tSwal.close();\r\n\t\t} catch (error) {\r\n\t\t\tSwal.fire('Error', error.message, 'error');\r\n\t\t}\r\n\t};\r\n};\r\n\r\n\r\n// Start deleting action\r\nexport const startDeleting = (id) => {\r\n\treturn async (dispatch, getState) => {\r\n\t\t// Message\r\n\t\tSwal.fire({\r\n\t\t\ttitle: 'Deleting',\r\n\t\t\ttext: 'Please wait...',\r\n\t\t\tallowOutsideClick: false,\r\n\t\t\tonBeforeOpen: () => {\r\n\t\t\t\tSwal.showLoading();\r\n\t\t\t},\r\n\t\t});\r\n\t\t// Get the user id credential\r\n\t\tconst uid = getState().auth.uid;\r\n\t\ttry {\r\n\t\t\t// Deletes the note from data base\r\n\t\t\tawait db.doc(`${uid}/journal/notes/${id}`).delete();\r\n\t\t\t// If everything is ok, delete the note from store\r\n\t\t\tdispatch(deleteNote(id));\r\n\t\t\t// End of message\r\n\t\t\tSwal.close();\r\n\t\t} catch (error) {\r\n\t\t\tSwal.fire('Error', error.message, 'error');\r\n\t\t}\r\n\t};\r\n};\r\n\r\n// It send the id from the note selected to delete\r\nexport const deleteNote = (id) => ({\r\n\ttype: types.notesDelete,\r\n\tpayload: id,\r\n});\r\n\r\n// Action to flush the notes data\r\nexport const noteLogout = () => ({\r\n\ttype: types.notesLogoutCleaning,\r\n});\r\n","import { useState } from \"react\";\r\n\r\nexport const useForm = (initialState = {}) => {\r\n  // Initial state passed\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  // Uptades the values in state from the target name\r\n  const handleInputChange = ({ target }) => {\r\n    setValues({\r\n      ...values,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  // Reset the old value with the new one\r\n  const reset = (newFormState = initialState) => {\r\n    setValues(newFormState);\r\n  };\r\n\r\n  return [values, handleInputChange, reset];\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport moment from 'moment';\r\nimport { startSaveNote, startUploading } from '../../actions/notes';\r\n\r\nexport const NotesAppBar = ({ date }) => {\r\n\t// Formatting the date\r\n\tconst noteDate = moment(date);\r\n\r\n\t// Set dispatch to use it\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// Get the active state data from state.notes.active\r\n\tconst { active } = useSelector((state) => state.notes);\r\n\r\n\t// Handles saving the note onClick action\r\n\tconst handleSave = () => {\r\n\t\t// Dispatch the start of saving a note action with\r\n\t\t// The active note info\r\n\t\tdispatch(startSaveNote(active));\r\n\t};\r\n\r\n\t// Handles the selection window to pick a file\r\n\tconst handlePicture = () => {\r\n\t\tdocument.querySelector('#fileSelector').click();\r\n\t};\r\n\r\n\t// Handles the selected file action\r\n\tconst handleFile = (e) => {\r\n\t\t// Get the file data\r\n\t\tconst file = e.target.files[0];\r\n\t\t// If there is a file it dispatch it to the\r\n\t\t// Start uploading action with the file data\r\n\t\tif (file) {\r\n\t\t\tdispatch(startUploading(file));\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='notes__appbar'>\r\n\t\t\t<span>{noteDate.format('MMM / D / YYYY')}</span>\r\n\t\t\t<input\r\n\t\t\t\tid='fileSelector'\r\n\t\t\t\ttype='file'\r\n\t\t\t\tname='file'\r\n\t\t\t\tstyle={{ display: 'none' }}\r\n\t\t\t\tonChange={handleFile}\r\n\t\t\t/>\r\n\t\t\t<div>\r\n\t\t\t\t<button className='btn' onClick={handlePicture}>\r\n\t\t\t\t\tPicture\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className='btn' onClick={handleSave}>\r\n\t\t\t\t\tSave\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { activeNote, startDeleting } from '../../actions/notes';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { NotesAppBar } from './NotesAppBar';\r\n\r\nexport const NotesScreen = () => {\r\n\t// Set dispatch to use it\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// Get the active state data from state.notes.active\r\n\tconst { active: note } = useSelector((state) => state.notes);\r\n\r\n\t// Custom hook to handle the form entries, it set the\r\n\t// Initial state with the notes data\r\n\tconst [formValues, handleInputChange, reset] = useForm(note);\r\n\r\n\t// Get the title, body and it destructured\r\n\tconst { title, body, id } = formValues;\r\n\r\n\t// We save mutable variable value to compare if it changes\r\n\tconst activeId = useRef(note.id);\r\n\r\n\t// Effect to check if the active note are not the same with \r\n\t// The selected note to delete\r\n\tuseEffect(() => {\r\n\t\t// If there are not the same if reset the active note\r\n\t\tif (note.id !== activeId.current) {\r\n\t\t\treset(note);\r\n\t\t\t// Set the note id in variable\r\n\t\t\tactiveId.current = note.id;\r\n\t\t}\r\n\t}, [note, reset]);\r\n\r\n\t// Effect to update the state if formValues data has changed\r\n\tuseEffect(() => {\r\n\t\t// If has changed it dispatch the new values to the active note\r\n\t\tdispatch(activeNote(formValues.id, { ...formValues }));\r\n\t}, [formValues, dispatch]);\r\n\r\n\t// Handles the delete action\r\n\tconst handleDelete = () => {\r\n\t\t// Dispatch the start of deleting action with the note id to delete\r\n\t\tdispatch(startDeleting(id));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='notes__main-content'>\r\n\t\t\t<NotesAppBar date={formValues.date} />\r\n\t\t\t<div className='notes__content'>\r\n\t\t\t\t<input\r\n\t\t\t\t\tautoFocus={true}\r\n\t\t\t\t\tclassName='notes__input-title'\r\n\t\t\t\t\tname='title'\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tplaceholder='Entry your title'\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tvalue={title}\r\n\t\t\t\t/>\r\n\t\t\t\t<textarea\r\n\t\t\t\t\tclassName='notes__textarea'\r\n\t\t\t\t\tname='body'\r\n\t\t\t\t\tonChange={(e) => handleInputChange(e)}\r\n\t\t\t\t\tplaceholder='Entry content'\r\n\t\t\t\t\tvalue={body}\r\n\t\t\t\t></textarea>\r\n\r\n\t\t\t\t{note.url && (\r\n\t\t\t\t\t<div className='notes__image'>\r\n\t\t\t\t\t\t<img src={note.url} alt='' />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\r\n\t\t\t<button className='btn btn-danger' onClick={handleDelete}>\r\n\t\t\t\tDelete\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\n\r\nexport const NothingSelected = () => {\r\n\treturn (\r\n\t\t<div className='nothing__main-content'>\r\n\t\t\t<p>\r\n\t\t\t\tSelect something\r\n\t\t\t\t<br />\r\n\t\t\t\tor create an entry !\r\n\t\t\t</p>\r\n\r\n\t\t\t<i className='far fa-star fa-4x mt-5'></i>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import { types } from \"../types/types\";\r\n\r\n// Type to set an Error it returns the error info\r\nexport const setError = (err) => ( {\r\n    type: types.uiSetError,\r\n    payload: err\r\n} );\r\n\r\n// Type to remove the Error message\r\nexport const removeError = () => ( {\r\n    type: types.uiRemoveError\r\n} );\r\n\r\n// Type to set the loading spinner\r\nexport const startLoading = () => ( {\r\n    type: types.uiStartLoading\r\n} );\r\n\r\n// Type to end the loading spinner\r\nexport const finishLoading = () => ( {\r\n    type: types.uiFinishLoading\r\n} );","import Swal from 'sweetalert2';\r\n\r\nimport { firebase, googleAuthProvider } from '../firebase/firebase-config';\r\nimport { types } from '../types/types';\r\nimport { noteLogout } from './notes';\r\nimport { finishLoading, startLoading } from './ui';\r\n\r\n// Action to login with the Email and Passwoord\r\nexport const startLoginEmailPassword = (email, password) => {\r\n\treturn (dispatch) => {\r\n\t\t// Dispatch the loader spinner\r\n\t\tdispatch(startLoading());\r\n\t\t// Connection into firebase and auth\r\n\t\treturn firebase\r\n\t\t\t.auth()\r\n\t\t\t.signInWithEmailAndPassword(email, password)\r\n\t\t\t// If ok it dispatch the login action with user credentials\r\n\t\t\t.then(async ({ user }) => {\r\n\t\t\t\tawait dispatch(login(user.uid, user.displayName));\r\n\t\t\t\t// Message\r\n\t\t\t\tSwal.fire('Success', 'Welcome !', 'success');\r\n\t\t\t\t// Dispatch the end of loader spinner\r\n\t\t\t\tdispatch(finishLoading());\r\n\t\t\t})\r\n\t\t\t// Catch the error, it ends the loader spinner and show\r\n\t\t\t// the error message\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tdispatch(finishLoading());\r\n\t\t\t\tSwal.fire('Error', e.message, 'error');\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\n// Action to login with form data\r\nexport const startRegisterWithEmailPasswordName = (email, password, name) => {\r\n\treturn (dispatch) => {\r\n\t\t// Connection into firebase and auth\r\n\t\tfirebase\r\n\t\t\t.auth()\r\n\t\t\t.createUserWithEmailAndPassword(email, password)\r\n\t\t\t// If ok it dispatch the login action with user credentials\r\n\t\t\t.then(async ({ user }) => {\r\n\t\t\t\t// Await the response from updating user profile action\r\n\t\t\t\t// Updates the user display name with the received name\r\n\t\t\t\tawait user.updateProfile({ displayName: name });\r\n\t\t\t\t// Dispatch the new values\r\n\t\t\t\tdispatch(login(user.uid, user.displayName));\r\n\t\t\t})\r\n\t\t\t// Catch the error and show the message with its info\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tSwal.fire('Error', e.message, 'error');\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\n// Action to login with Google credentials\r\nexport const startGoogleLogin = () => {\r\n\treturn (dispatch) => {\r\n\t\t// Connection into firebase and auth and show Popup\r\n\t\tfirebase\r\n\t\t\t.auth()\r\n\t\t\t.signInWithPopup(googleAuthProvider)\r\n\t\t\t// If ok it dispatch the received user credentials\r\n\t\t\t.then(({ user }) => {\r\n\t\t\t\tdispatch(login(user.uid, user.displayName));\r\n\t\t\t})\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tSwal.fire('Error', e.message, 'error');\r\n\t\t\t});\r\n\t};\r\n};\r\n\r\n// Sends the news values to reducer\r\nexport const login = (uid, displayName) => {\r\n\treturn {\r\n\t\ttype: types.login,\r\n\t\tpayload: {\r\n\t\t\tuid,\r\n\t\t\tdisplayName,\r\n\t\t},\r\n\t};\r\n};\r\n\r\n// Action to logout\r\nexport const startLogout = () => {\r\n\treturn async (dispatch) => {\r\n\t\t// Connection into firebase and logout\r\n\t\tawait firebase\r\n\t\t\t.auth()\r\n\t\t\t.signOut()\r\n\t\t\t// If ok Dispatch the logout action type to\r\n\t\t\t// flush user credentials and the notes data\r\n\t\t\t.then(dispatch(logout()), dispatch(noteLogout()))\r\n\t\t\t.catch((e) => {\r\n\t\t\t\tSwal.fire('Error', e.message, 'error');\r\n\t\t\t});\r\n\t\t/* dispatch(logout());\r\n\t\tdispatch(noteLogout()); */\r\n\t};\r\n};\r\n\r\n// Action to logout\r\nexport const logout = () => ({\r\n\ttype: types.logout,\r\n});\r\n","import React from 'react';\r\nimport moment from 'moment';\r\nimport { useDispatch } from 'react-redux';\r\nimport { activeNote } from '../../actions/notes';\r\n\r\nexport const JournalEntry = ({ id, date, title, body, url }) => {\r\n\r\n    const noteDate = moment(date);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleEntryClick = () => {\r\n        dispatch( \r\n            activeNote( id, {\r\n                date, title, body, url\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className=\"journal__entry pointer animate__animated animate__fadeIn animate__faster\"\r\n            onClick={ handleEntryClick }\r\n        >\r\n            \r\n            {\r\n                url &&\r\n                <div \r\n                    className=\"journal__entry-picture\"\r\n                    style={{\r\n                        backgroundSize: 'cover',\r\n                        backgroundImage: `url(${ url })`\r\n                    }}\r\n                ></div>\r\n            }\r\n\r\n            <div className=\"journal__entry-body\">\r\n                <p className=\"journal__entry-title\">\r\n                    { title }\r\n                </p>\r\n                <p className=\"journal__entry-content\">\r\n                    { body }\r\n                </p>\r\n            </div>\r\n\r\n            <div className=\"journal__entry-date-box\">\r\n                <span> { noteDate.format('MMMM') } </span>\r\n                <h4> { noteDate.format('DD') } </h4>\r\n                <span> { noteDate.format('yyyy') } </span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { JournalEntry } from './JournalEntry';\r\n\r\nexport const JournalEntries = () => {\r\n\t// Get the notes from state.notes.notes\r\n\tconst { notes } = useSelector((state) => state.notes);\r\n\r\n\treturn (\r\n\t\t<div className='journal__entries'>\r\n\t\t\t{notes.map((note) => (\r\n\t\t\t\t<JournalEntry key={note.id} {...note} />\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { startLogout } from '../../actions/auth';\r\nimport { startNewNote } from '../../actions/notes';\r\nimport { JournalEntries } from './JournalEntries';\r\n\r\nexport const Sidebar = () => {\r\n\t// Get the name from state.auth.name\r\n\tconst { name } = useSelector((state) => state.auth);\r\n\r\n\t// Set dispatch to use it\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// Handles the logout onCLick\r\n\tconst handleLogout = () => {\r\n\t\t// Dispatch the start of logout action\r\n\t\tdispatch(startLogout());\r\n\t};\r\n\t\r\n\t// Handles the new entry onClick\r\n\tconst handleNewEntry = () => {\r\n\t\t// Dispatch the start of adding a new note action\r\n\t\tdispatch(startNewNote());\r\n\t};\r\n\r\n\treturn (\r\n\t\t<aside className='journal__sidebar'>\r\n\t\t\t<div className='journal__sidebar-navbar'>\r\n\t\t\t\t<h3 className='mt-5'>\r\n\t\t\t\t\t<i className='far fa-moon'></i>\r\n\t\t\t\t\t<span> {name}</span>\r\n\t\t\t\t</h3>\r\n\t\t\t\t<button className='btn' onClick={handleLogout}>\r\n\t\t\t\t\tLogout\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t\t<div className='journal__new-entry' onClick={handleNewEntry}>\r\n\t\t\t\t<i className='far fa-calendar-plus fa-5x'></i>\r\n\t\t\t\t<p className='mt-5'>New entry</p>\r\n\t\t\t</div>\r\n\t\t\t<JournalEntries />\r\n\t\t</aside>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NotesScreen } from '../notes/NotesScreen';\r\nimport { NothingSelected } from './NothingSelected';\r\nimport { Sidebar } from './Sidebar';\r\n\r\nexport const JournalScreen = () => {\r\n\t// Get the active from state.notes.active\r\n\tconst { active } = useSelector((state) => state.notes);\r\n\r\n\treturn (\r\n\t\t<div className='journal__main-content'>\r\n\t\t\t<Sidebar />\r\n\t\t\t<main>{active ? <NotesScreen /> : <NothingSelected />}</main>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { startGoogleLogin, startLoginEmailPassword } from '../../actions/auth';\r\n\r\nexport const LoginScreen = () => {\r\n\t// Set dispatch to use it\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// Get the loading state data from state.ui.loading\r\n\tconst { loading } = useSelector((state) => state.ui);\r\n\r\n\t// Custom hook to manage the form\r\n\tconst [formValues, handleInputChange] = useForm({\r\n\t\tname: '',\r\n\t\temail: '',\r\n\t\tpassword: '',\r\n\t\tpassword2: '',\r\n\t});\r\n\r\n\t// Destructuring the data in formValues to obtain\r\n\t// email and password\r\n\tconst { email, password } = formValues;\r\n\r\n\t// Handles the login action on submit\r\n\tconst handleLogin = (e) => {\r\n\t\t// Prevents the browser refresh\r\n\t\te.preventDefault();\r\n\t\t// Dispatch the action with user credentials\r\n\t\tdispatch(startLoginEmailPassword(email, password));\r\n\t};\r\n\r\n\t// Handles the login action with Google credentials\r\n\tconst handleGoogleLogin = () => {\r\n\t\t// Dispatch the Google login action\r\n\t\tdispatch(startGoogleLogin());\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1 className='auth__title'>Login</h1>\r\n\t\t\t<form onSubmit={handleLogin}>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Email'\r\n\t\t\t\t\tname='email'\r\n\t\t\t\t\tclassName='auth__input'\r\n\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\tvalue={email}\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='password'\r\n\t\t\t\t\tplaceholder='Password'\r\n\t\t\t\t\tname='password'\r\n\t\t\t\t\tclassName='auth__input'\r\n\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\tvalue={password}\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<button\r\n\t\t\t\t\ttype='submit'\r\n\t\t\t\t\tclassName='btn btn-primary btn-block'\r\n\t\t\t\t\tdisabled={loading}\r\n\t\t\t\t>\r\n\t\t\t\t\tLogin\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<hr />\r\n\r\n\t\t\t\t<div className='auth__social-networks'>\r\n\t\t\t\t\t<p>Login with social networks</p>\r\n\r\n\t\t\t\t\t<div className='google-btn' onClick={handleGoogleLogin}>\r\n\t\t\t\t\t\t<div className='google-icon-wrapper'>\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tclassName='google-icon'\r\n\t\t\t\t\t\t\t\tsrc='https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg'\r\n\t\t\t\t\t\t\t\talt='google button'\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t<p className='btn-text'>\r\n\t\t\t\t\t\t\t<b>Sign in with Google</b>\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<Link to='/auth/register' className='link'>\r\n\t\t\t\t\tCreate new account\r\n\t\t\t\t</Link>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport validator from 'validator';\r\nimport { Link } from 'react-router-dom';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport { removeError, setError } from '../../actions/ui';\r\nimport { startRegisterWithEmailPasswordName } from '../../actions/auth';\r\n\r\nexport const RegistrerScreen = () => {\r\n\t// Set dispatch to use it\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// Get the msgError state data from state.ui.msgError\r\n\tconst { msgError } = useSelector((state) => state.ui);\r\n\r\n\t// Custom hook to manage the form\r\n\tconst [formValues, handleInputChange] = useForm({\r\n\t\tname: '',\r\n\t\temail: '',\r\n\t\tpassword: '',\r\n\t\tconfirmPass: '',\r\n\t});\r\n\r\n\t// Destructuring the data in formValues to obtain\r\n\t// email and password, name and password confirmation\r\n\tconst { name, email, password, confirmPass } = formValues;\r\n\r\n\t// Handles the register submit\r\n\tconst handleRegister = (e) => {\r\n\t\t// Prevents the browser refresh\r\n\t\te.preventDefault();\r\n\t\t// Checks if form is valid\r\n\t\tif (isFormValid()) {\r\n\t\t\t// If ok it dispatch the action to login with the\r\n\t\t\t// form submited data\r\n\t\t\tdispatch(startRegisterWithEmailPasswordName(email, password, name));\r\n\t\t}\r\n\t};\r\n\r\n\t// Verifys it data in form is ok, it returns false if not and true if is ok\r\n\tconst isFormValid = () => {\r\n\t\t// If there is no name it shows an Error message\r\n\t\tif (name.trim().length === 0) {\r\n\t\t\tdispatch(setError('Name is required'));\r\n\t\t\treturn false;\r\n\t\t\t// If there is no email correct sintax it shows and\r\n\t\t\t// Error message\r\n\t\t} else if (!validator.isEmail(email)) {\r\n\t\t\tdispatch(setError('Email is not valid'));\r\n\t\t\treturn false;\r\n\t\t\t// If the password and its confirmation are not equals or\r\n\t\t\t// dont have at least 5 characters shows an Error message\r\n\t\t} else if (password !== confirmPass || password.length < 5) {\r\n\t\t\tdispatch(\r\n\t\t\t\tsetError(\r\n\t\t\t\t\t'Password should be at least 6 characters and should match each other'\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t// Dispatch action to remove the Error message\r\n\t\tdispatch(removeError());\r\n\t\treturn true;\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1 className='auth__title'>Register</h1>\r\n\r\n\t\t\t<form onSubmit={handleRegister}>\r\n\t\t\t\t{msgError && <div className='auth__alert-error'>{msgError}</div>}\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Name'\r\n\t\t\t\t\tname='name'\r\n\t\t\t\t\tclassName='auth__input'\r\n\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t/>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='text'\r\n\t\t\t\t\tplaceholder='Email'\r\n\t\t\t\t\tname='email'\r\n\t\t\t\t\tclassName='auth__input'\r\n\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tvalue={email}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='password'\r\n\t\t\t\t\tplaceholder='Password'\r\n\t\t\t\t\tname='password'\r\n\t\t\t\t\tclassName='auth__input'\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\tvalue={password}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype='password'\r\n\t\t\t\t\tplaceholder='Confirm password'\r\n\t\t\t\t\tname='confirmPass'\r\n\t\t\t\t\tclassName='auth__input'\r\n\t\t\t\t\tonChange={handleInputChange}\r\n\t\t\t\t\tautoComplete='off'\r\n\t\t\t\t\tvalue={confirmPass}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<button type='submit' className='btn btn-primary btn-block mb-5'>\r\n\t\t\t\t\tRegister\r\n\t\t\t\t</button>\r\n\r\n\t\t\t\t<Link to='/auth/login' className='link'>\r\n\t\t\t\t\tAlready registered ?\r\n\t\t\t\t</Link>\r\n\t\t\t</form>\r\n\t\t</>\r\n\t);\r\n};\r\n","import React from \"react\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { LoginScreen } from \"../components/auth/LoginScreen\";\r\nimport { RegistrerScreen } from \"../components/auth/RegisterScreen\";\r\n\r\nexport const AuthRouter = () => {\r\n  return (\r\n    <div className=\"auth__main\">\r\n      <div className=\"auth__box-container\">\r\n        <Switch>\r\n          <Route path=\"/auth/login\" component={LoginScreen} />\r\n\r\n          <Route path=\"/auth/register\" component={RegistrerScreen} />\r\n\r\n          <Redirect to=\"/auth/login\" />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest}\r\n            component={(props) => (\r\n                (!isAuthenticated)\r\n                    ? (<Component {...props} />)\r\n                    : (<Redirect to=\"/\" />)\r\n            )}\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest}\r\n            component={(props) => (\r\n                (isAuthenticated)\r\n                    ? (<Component {...props} />)\r\n                    : (<Redirect to=\"/auth/login\" />)\r\n            )}\r\n        />\r\n    )\r\n}\r\n","import { firebase } from '../firebase/firebase-config';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport { JournalScreen } from '../components/journal/JournalScreen';\r\nimport { AuthRouter } from './AuthRouter';\r\nimport { login } from '../actions/auth';\r\nimport { PublicRoute } from './PublicRoutes';\r\nimport { PrivateRoute } from './PrivateRoutes';\r\nimport { startLoadingNotes } from '../actions/notes';\r\n\r\nexport const AppRouter = () => {\r\n\t// Dispatch instance\r\n\tconst dispatch = useDispatch();\r\n\r\n\t// States\r\n\tconst [checking, setChecking] = useState(true);\r\n\tconst [isLogged, setIsLogged] = useState(false);\r\n\r\n\t// Effect if user credentials has changed\r\n\tuseEffect(() => {\r\n\t\t// Connection to firebase\r\n\t\tfirebase.auth().onAuthStateChanged(async (user) => {\r\n\t\t\t// If there is an user it get its id\r\n\t\t\tif (user?.uid) {\r\n\t\t\t\t// Dispatch the new user credentials\r\n\t\t\t\tdispatch(login(user.uid, user.displayName));\r\n\t\t\t\t// Set logged as true\r\n\t\t\t\tsetIsLogged(true);\r\n\t\t\t\t// Dispatch the action to get the user notes\r\n\t\t\t\tdispatch(startLoadingNotes(user.uid));\r\n\t\t\t\t// If not it sets logged as false\r\n\t\t\t} else {\r\n\t\t\t\tsetIsLogged(false);\r\n\t\t\t}\r\n\t\t\t// Set checking state as false to stop loading spinner gif\r\n\t\t\tsetChecking(false);\r\n\t\t});\r\n\t}, [dispatch, setChecking, setIsLogged]);\r\n\r\n\t// If checking it shows the loading spinner gif\r\n\tif (checking) {\r\n\t\treturn (\r\n\t\t\t<img\r\n\t\t\t\tsrc='https://c.tenor.com/0iK9a1WkT40AAAAC/loading-white.gif'\r\n\t\t\t\tstyle={{ display: 'block', marginLeft: 'auto', marginRight: 'auto' }}\r\n\t\t\t\talt=''\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Router>\r\n\t\t\t<div>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<PublicRoute\r\n\t\t\t\t\t\tisAuthenticated={isLogged}\r\n\t\t\t\t\t\tpath='/auth'\r\n\t\t\t\t\t\tcomponent={AuthRouter}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<PrivateRoute\r\n\t\t\t\t\t\tisAuthenticated={isLogged}\r\n\t\t\t\t\t\texact\r\n\t\t\t\t\t\tpath='/'\r\n\t\t\t\t\t\tcomponent={JournalScreen}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t<Redirect to='/auth/login' />\r\n\r\n\t\t\t\t\t<AuthRouter />\r\n\t\t\t\t</Switch>\r\n\t\t\t</div>\r\n\t\t</Router>\r\n\t);\r\n};\r\n","import { types } from '../types/types';\r\n\r\nconst initialState = {};\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\t// Return the new user credentials values\r\n\t\tcase types.login:\r\n\t\t\treturn {\r\n\t\t\t\t// Set the state value with credentials received\r\n\t\t\t\tuid: action.payload.uid,\r\n\t\t\t\tname: action.payload.displayName,\r\n\t\t\t};\r\n\t\t// Return an empty object \r\n\t\tcase types.logout:\r\n\t\t\t// Flush the user credentials\r\n\t\t\treturn {};\r\n\t\t// Default type\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { types } from '../types/types';\r\n\r\nconst initialState = {\r\n\tnotes: [],\r\n\tactive: null,\r\n};\r\n\r\nexport const notesReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\t// It changes the state value in active with the payload\r\n\t\tcase types.notesActive:\r\n\t\t\treturn {\r\n\t\t\t\t// It return the state itself\r\n\t\t\t\t...state,\r\n\t\t\t\tactive: {\r\n\t\t\t\t\t...action.payload,\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t// It add the new note into state\r\n\t\tcase types.notesAddNew:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tnotes: [action.payload, ...state.notes],\r\n\t\t\t};\r\n\t\t// It changes the state value in notes with the payload data\r\n\t\tcase types.notesLoad:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tnotes: [...action.payload],\r\n\t\t\t};\r\n\t\t// It returns the note updated\r\n\t\tcase types.notesUpdated:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tnotes: state.notes.map((note) =>\r\n\t\t\t\t\tnote.id === action.payload.id ? action.payload.note : note\r\n\t\t\t\t),\r\n\t\t\t};\r\n\t\t// Return all the notes but not the deleted note\r\n\t\tcase types.notesDelete:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\t// It purges the active note\r\n\t\t\t\tactive: null,\r\n\t\t\t\tnotes: state.notes.filter((note) => note.id !== action.payload),\r\n\t\t\t};\r\n\t\t// Flush the notes and the active note\r\n\t\tcase types.notesLogoutCleaning:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tnotes: [],\r\n\t\t\t\tactive: null,\r\n\t\t\t};\r\n\t\t// Default type\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { types } from '../types/types';\r\n\r\nconst initialState = {\r\n\tloading: false,\r\n\tmsgError: null,\r\n};\r\n\r\nexport const uiReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\t// Set the error message data\r\n\t\tcase types.uiSetError:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmsgError: action.payload,\r\n\t\t\t};\r\n\t\t// Remove the error message data\r\n\t\tcase types.uiRemoveError:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tmsgError: null,\r\n\t\t\t};\r\n\t\t// Set true the loading spinner\r\n\t\tcase types.uiStartLoading:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true,\r\n\t\t\t};\r\n\t\t// Remove the loading spinner\r\n\t\tcase types.uiFinishLoading:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: false,\r\n\t\t\t};\r\n\t\t// Default case\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { createStore, combineReducers, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport { authReducer } from \"../reducers/authReducer\";\r\nimport { notesReducer } from \"../reducers/notesReducer\";\r\nimport { uiReducer } from \"../reducers/uiReducer\";\r\n\r\n// Configuration to use Redux chrome extension\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// Redux native function to combine all reducers\r\nconst reducers = combineReducers({\r\n  auth: authReducer,\r\n  ui: uiReducer,\r\n  notes: notesReducer,\r\n});\r\n\r\n// Creates the store with the reducers with thunk in order to\r\n// Have a middleware who extends the store abilities and let \r\n// Write async logic that interacts with the store\r\nexport const store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n","import React from \"react\";\r\nimport { AppRouter } from \"./routers/AppRouter\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\n\r\nexport const JournalApp = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <AppRouter />\r\n    </Provider>\r\n  );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { JournalApp } from './JournalApp';\nimport './styles/styles.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <JournalApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}